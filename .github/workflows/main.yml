name: 'Terraform'

on:
  push:
    branches: [ "main" ]
  pull_request:

permissions:
  contents: read

jobs:
  create-eks-cluster:
    name: 'EKS Cluster create'
    runs-on: self-hosted
    environment: production
    

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash
        working-directory: ./terraform/create-eks-cluster

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      run: terraform plan -input=false     
        
    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false

    - name: Update kubeconfig
      run: aws eks --region $(terraform output -raw region) update-kubeconfig --name $(terraform output -raw cluster_name)

  deploy-helm-services:
    name: 'nginx ingress and cert-manager installs'
    runs-on: self-hosted
    environment: production
    needs: create-eks-cluster

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/deploy-helm-services

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      run: terraform plan -input=false     
        
    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false

  create-deployment-and-service:
    name: 'deployment and service install'
    runs-on: self-hosted
    environment: production
    needs: deploy-helm-services

    defaults:
      run:
        shell: bash
        working-directory: ./terraform/create-deployment-and-service

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Terraform Init
      run: terraform init
      
    - name: Terraform Format
      run: terraform fmt -check

    - name: Terraform Plan
      run: terraform plan -input=false     
        
    - name: Terraform apply
      if: github.ref == 'refs/heads/main'
      run: terraform apply -auto-approve -input=false
#      env:
#        DOCKERCONFIG: ${{ secrets.TF_DOCKER_CONFIG }}